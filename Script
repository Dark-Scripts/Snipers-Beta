local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
	Name = "Dark Hub | Snipers-Beta",
	LoadingTitle = "Dark Hub",
	LoadingSubtitle = "by DΔRKぷ#0960",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = dhSnipers, -- Create a custom folder for your hub/game
		FileName = "DH Snipers-Beta"
	},
        Discord = {
        	Enabled = true,
        	Invite = "bcNT922xg6", -- The Discord invite code, do not include discord.gg/
        	RememberJoins = true -- Set this to false to make them join the discord every time they load it up
        },
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Sirius Hub",
		Subtitle = "Key System",
		Note = "Join the discord (discord.gg/sirius)",
		FileName = "SiriusKey",
		SaveKey = true,
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = "Hello"
	}
})

--Main
local Tab = Window:CreateTab("Main") -- Title, Image
local Section = Tab:CreateSection("Main Settings")

local Button = Tab:CreateButton({
	Name = "Silent Aim",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/Dark-Scripts/Snipers-Beta/main/Snipers"))()
	end,
})


local Button = Tab:CreateButton({
	Name = "Player ESP",
	Callback = function()
		local Players = game:GetService("Players")
		local RunService = game:GetService("RunService")
		local Highlight = Instance.new("Highlight")
		Highlight.Name = "Highlight"
		function ApplyToCurrentPlayers()
    		for i,player in pairs(Players:GetChildren()) do 
        	repeat wait() until player.Character
        	if not player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight") then
            	local HighlightClone = Highlight:Clone()
            	HighlightClone.Adornee = player.Character
            	HighlightClone.Parent = player.Character:FindFirstChild("HumanoidRootPart")
            	HighlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            	HighlightClone.Name = "Highlight"
			end
        end
    end
    
	RunService.Heartbeat:Connect(function()
    	ApplyToCurrentPlayers()
	end)
	end,
})

--Player Settings
local Tab = Window:CreateTab("Player")
local Section = Tab:CreateSection("Player Features")

local Slider = Tab:CreateSlider({
	Name = "WalkSpeed",
	Range = {16, 500},
	Increment = 1,
	Suffix = "",
	CurrentValue = 16,
	Flag = "wspd", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v;
	end,
})

local Slider = Tab:CreateSlider({
	Name = "JumpPower",
	Range = {50, 500},
	Increment = 1,
	Suffix = "",
	CurrentValue = 50,
	Flag = "jmpp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = v;
	end,
})

local Slider = Tab:CreateSlider({
	Name = "HipHeight",
	Range = {1, 500},
	Increment = 1,
	Suffix = "",
	CurrentValue = 50,
	Flag = "hiph", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		game.Players.LocalPlayer.Character.Humanoid.HipHeight = v;
	end,
})

local Slider = Tab:CreateSlider({
	Name = "Gravity",
	Range = {1, 500},
	Increment = 1,
	Suffix = "",
	CurrentValue = 50,
	Flag = "grvty", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		Workspace.Gravity = v;
	end,
})

local Slider = Tab:CreateSlider({
	Name = "FOV",
	Range = {math.floor(workspace.CurrentCamera.FieldOfView), 120},
	Increment = 1,
	Suffix = "",
	CurrentValue = math.floor(workspace.CurrentCamera.FieldOfView),
	Flag = "fov", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		workspace.CurrentCamera.FieldOfView = v;
	end,
})

--Credits
local Tab = Window:CreateTab("Credits")
local Section = Tab:CreateSection("Credits")

local Paragraph = Tab:CreateParagraph({Title = "Credits", Content = "Simple script for Snipers[Beta] made by DΔRKぷ#0960"})
